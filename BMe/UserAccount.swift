//
//  User.swift
//  BMe
//
//  Created by Jonathan Cheng on 12/2/16.
//  Copyright Â© 2016 Jonathan Cheng. All rights reserved.
//

import UIKit
import FirebaseAuth
import Firebase

/**
 UserAccount singleton tracks and updates currently logged in user's account.  Model is based on FIRUser and customized user data is implemented in UserProfile class
 */
class UserAccount: NSObject {
    
    /** Singleton accessor */
    static let currentUser = UserAccount()
    private override init() {
        super.init()
    }
    
    /** Model and security authorization check*/
    private var firUser: FIRUser? {
        get {
            return FIRAuth.auth()?.currentUser
        }
    }
    
    /** Is the user currently signed in (Anonymous turned off) */
    var isSignedIn: Bool {
        get {
            if firUser != nil {
                return true
            }
            return false
        }
    }
    
    /** The user's display name (handle) or user name */
    var username: String? {
        get {
            return firUser?.displayName
        }
        set {
            if let username = newValue, newValue != "" {
                // On changing the username, save to FIRUser as well
                updateDisplayName(username) {
                    // Update UserProfile as well
                    UserProfile.get(self.firUser!.uid, completion: { (userprofile) in
                        userprofile.username = username
                    })
                }
            }
        }
    }

    /** The user's registered Email */
    var email: String? {
        get {
            return firUser?.email
        }
    }
    
    /** The URL to the user's profile photo or avatar */
    var avatarURL: URL? {
        get {
            // Returns the avatar's GS URL
            return firUser?.photoURL
        }
        set {
            // Update FIRUser
            if let firUser = firUser {
                let changeRequest = firUser.profileChangeRequest()
                changeRequest.photoURL = newValue
                changeRequest.commitChanges(){ (error) in
                    if let error = error {
                        // There's an error updating FIRUser, stop
                        print("Error updating user photo url: \(error.localizedDescription)")
                    } else {
                        // Otherwise update UserProfile
                        UserProfile.get(firUser.uid, completion: { (userprofile) in
                            userprofile.avatarURL = newValue
                        })
                    }
                }
            } else {
                print("Error cannot update avatar.  No user currently logged in")
            }
        }
    }
    
    /** User's unique-autogenerated ID */
    var uid: String? {
        get {
            return firUser?.uid
        }
    }
    
    
    // MARK: - Methods
    /** Attempt to sign in a user with given credentials */
    func signIn(withEmail email: String, password: String, completion: FirebaseAuth.FIRAuthResultCallback? = nil) {
        FIRAuth.auth()?.signIn(withEmail: email, password: password, completion: { (user: FIRUser?, error: Error?) in
            if let error = error {
                print("Error on login: \(error.localizedDescription)")
                // Error occurred, return with no user and error object
                completion?(nil, error)
            } else {
                // Sign in successful
                // Complete sign-in of user
                self.signedIn()
                completion?(user, error)
            }
        })
    }
    
    /** Complete the sign-in process (called after successful sign-in) */
    func signedIn() {
        // Check that the user is actually signed in already
        if UserAccount.currentUser.isSignedIn {
            
            MeasurementHelper.sendLoginEvent()
            
            // Broadcast signin notification (AppDelegate should pick up and present Root VC)
            let notificationName = Notification.Name(rawValue: Constants.NotificationKeys.didSignIn)
            NotificationCenter.default.post(name: notificationName, object: nil, userInfo: nil)
        } else {
            
            print("Could not complete login;- no user currently signed in")
        }
    }
    
    /** 
     Sign out the current user
     */
    func signOut() {
        do {
            try FIRAuth.auth()?.signOut()
            
            // Broadcast signout notification (AppDelegate should pick up and present Login VC
            let notificationName = Notification.Name(rawValue: Constants.NotificationKeys.didSignOut)
            NotificationCenter.default.post(name: notificationName, object: nil, userInfo: nil)
        } catch let signOutError as NSError {
            print ("Error signing out: \(signOutError.localizedDescription)")
        }
    }
    
    /** Update firUser displayname */
    func updateDisplayName(_ displayName: String, completion:@escaping ()->()) {
        // Update FIRUser display name
        if let firUser = firUser {
            let changeRequest = firUser.profileChangeRequest()
            changeRequest.displayName = displayName
            changeRequest.commitChanges(){ (error) in
                if let error = error {
                    // There's an error updating FIRUser, stop
                    print("Error updating user display name: \(error.localizedDescription)")
                } else {
                    completion()
                }
            }
        } else {
            print("Error cannot update username.  No user currently logged in")
        }
    }
    
    //TODO: - Complete
    /*
     func didRequestPasswordReset() {
     let prompt = UIAlertController.init(title: nil, message: "Email:", preferredStyle: .alert)
     let okAction = UIAlertAction.init(title: "OK", style: .default) { (action) in
     let userInput = prompt.textFields![0].text
     if (userInput!.isEmpty) {
     return
     }
     AppState.shared.firebaseAuth?.sendPasswordReset(withEmail: userInput!) { (error) in
     if let error = error {
     print(error.localizedDescription)
     return
     }
     }
     }
     prompt.addTextField(configurationHandler: nil)
     prompt.addAction(okAction)
     present(prompt, animated: true, completion: nil);
     }
     */

    // MARK: - Class methods
    
    /**
     Creates and switches to new user using stock FIRUser and creates a new UserProfile to Database.
     */
    public class func createUser(withUsername userName: String, email: String, password: String, completion: FirebaseAuth.FIRAuthResultCallback? = nil) {
        // Create stock FIRUser
        FIRAuth.auth()?.createUser(withEmail: email, password: password, completion: { (newFIRUser: FIRUser?, error: Error?) in
            if let error = error {
                print("Error creating new user: \(error.localizedDescription)")
                completion?(nil, error)
            }
            else if let newFIRUser = newFIRUser {

                // Set display name to firUser
                UserAccount.currentUser.updateDisplayName(userName, completion: {
                })
                
                // Create UserProfile (overwrite any existing leaf data)
                UserProfile.create(UID: newFIRUser.uid, username: userName)
                
                // Complete sign in
                UserAccount.currentUser.signedIn()
                completion?(newFIRUser, error)
            }
        })
    }
}

